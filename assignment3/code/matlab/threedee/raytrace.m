function [polygon,intersection,t] = raytrace(N,d,T,O,D)
% raytrace: trace the ray (O,D) and find closes intersection with polygon set
% [polygon,intersection] = raytrace(N,d,T,O,D)
%   N - 3*np normals for polygons (generated by normals.m)
%   d - fourth plane coordinate   (generated by normals.m)
%   T - the transformation matrices (generated by polygonT.m)
%   O - origin of the ray
%   D - direction of the ray
% returns:
%   polygon: the index of the closest intersected polygon (0 if none)
%   intersection: the actual intersection point

% plane representation : Np + d = 0
% ray representation   : r(t) = O + Dt
% => intersection point: t = - (d + NO) / ND

[m,n] = size(N);
NO = O'*N;             % find inner products NO
ND = D'*N;             % find inner products ND

cut = ND~=0;                          % find non-parallel planes
Icut = find(cut);                     % we only compute for non-parallel
tcut = -(d(Icut)+NO(Icut))./ND(Icut); % calculate intersections

ahead = tcut>0;       % find those that are on the positive half of the ray
Iahead = Icut(ahead);
tahead = tcut(ahead);

% sort intersections according to t
[tsorted,sorted] = sort(tahead);
Isorted = Iahead(sorted);

% now find ray-triangle intersection
% find A,B
polygon = 0;
intersection = [];
t=Inf;
ns = size(Isorted,2);
for i=1:ns
  ti = tsorted(i); % the t value of the ith intersection
  Ii = Isorted(i); % the polygon index
  r = O + ti*D;    % the actual intersection point
  T34 = T(:,:,Ii); % the transformation matrix of the corresp polygon
  ab = T34*[r;1];  % the 2D homogeneous coordinate in the polygon
  a=ab(1);b=ab(2);
  if (a>=0 & b>=0 & (a+b)<=1)
    polygon = Ii;
    intersection = r;
    t=ti;
    break;
  end
end


